name: CI

on:
  push:
    branches: [auto]
  pull_request:
  workflow_dispatch:

jobs:
  linux-ci-static:
    name: stable, Linux, static library, no pkg-config
    runs-on: ubuntu-latest
    env:
      HARFBUZZ_SYS_NO_PKG_CONFIG: 1
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      # Install harfbuzz from the source in harfbuzz-sys. Use an out-of-tree
      # build to avoid contaminating the source tree.
      - name: Build harfbuzz
        env:
          PREFIX: /usr/local
        run: |
          sudo pip install meson
          sudo apt update
          sudo apt install ninja-build -y
          meson $RUNNER_TEMP/build harfbuzz-sys/harfbuzz \
            --prefix $PREFIX \
            --libdir lib \
            --default-library static \
            -Dicu=disabled \
            -Dfreetype=disabled \
            -Dglib=disabled
          meson compile -C $RUNNER_TEMP/build
          sudo meson install -C $RUNNER_TEMP/build
          TEMP_PATH="$PREFIX/lib"
          echo "LD_LIBRARY_PATH=$TEMP_PATH" >> $GITHUB_ENV
          [[ "$TEMP_PATH" == "$PREFIX/lib" ]] || exit 1

      - name: Install nightly toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Cargo build
        run: cargo build --workspace --features v2_6

      - name: Cargo test
        run: cargo test --workspace
        env:
          RUST_BACKTRACE: 1

      - name: ctest tests
        run: cargo run --manifest-path=systest/Cargo.toml

  linux-ci-static-buildrs:
    name: stable, Linux, build by build.rs, static library, no pkg-config
    runs-on: ubuntu-latest
    env:
      HARFBUZZ_SYS_NO_PKG_CONFIG: 1
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install nightly toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: install build tools
        run: |
          sudo pip install meson
          sudo apt update
          sudo apt install ninja-build -y

      - name: Cargo build
        run: cargo build --workspace --features vendored --features v4_4

      - name: Cargo test
        run: cargo test --workspace --features vendored --features v4_4
        env:
          RUST_BACKTRACE: 1

      - name: ctest tests
        run: >-
          cargo run
            --manifest-path=systest/Cargo.toml
            --features vendored
            --features v4_4

  linux-ci-shared:
    name: stable, Linux, shared linking, no pkg-config
    runs-on: ubuntu-latest
    env:
      HARFBUZZ_SYS_NO_PKG_CONFIG: 1
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install nightly toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Cargo package
        run: |
          cargo package
            --manifest-path=harfbuzz-sys/Cargo.toml
            --features v2_6_8

      - name: Cargo build
        run: cargo build --workspace --features v2_6_8

      - name: Cargo test
        run: cargo test --workspace --features v2_6_8
        env:
          RUST_BACKTRACE: 1

      - name: ctest tests
        run: cargo run --manifest-path=systest/Cargo.toml --features v2_6_8

  linux-ci-bindgen:
    name: stable, Linux, system pkg-config and bindgen
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install nightly toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Install harfbuzz
        run: |
          sudo apt update
          sudo apt install libharfbuzz-dev -y

      - name: Cargo package
        run: |
          cargo package \
            --manifest-path=harfbuzz-sys/Cargo.toml \
            --features bindgen

      - name: Cargo build
        run: cargo build --workspace --features bindgen

      - name: Cargo test
        run: cargo test --workspace --features bindgen
        env:
          RUST_BACKTRACE: 1

      - name: ctest tests
        run: cargo run --manifest-path=systest/Cargo.toml --features bindgen

  mac-ci-shared:
    name: stable, macOS, shared library
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install nightly toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: install harfbuzz latest
        run: brew install harfbuzz

      - name: Cargo build
        run: cargo build --workspace --features v4_3

      - name: Cargo test
        run: cargo test --workspace --features v4_3
        env:
          RUST_BACKTRACE: 1

      - name: ctest tests
        run: cargo run --manifest-path=systest/Cargo.toml --features v4_3

  mac-ci-shared-bindgen-latest:
    name: stable, macOS, shared library, bindgen with harfbuzz latest version
    runs-on: macos-latest
    env:
      PKG_CONFIG_PATH: /usr/local/lib/pkgconfig

    steps:
      - uses: actions/checkout@v3

      - name: Install nightly toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: install harfbuzz latest
        run: brew install harfbuzz

      - name: Cargo build
        run: cargo build --workspace --features bindgen

      - name: Cargo test
        run: cargo test --workspace --features bindgen
        env:
          RUST_BACKTRACE: 1

      - name: ctest tests
        run: cargo run --manifest-path=systest/Cargo.toml --features bindgen

  windows-ci:
    name: Windows
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install nightly toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: install meson
        run: pip install meson ninja

      - name: Dependency install
        run: |
          vcpkg install --recurse `
            glib:x64-windows `
            cairo:x64-windows `
            pkgconf:x64-windows `
            freetype:x64-windows `
            fontconfig:x64-windows

      - name: Cargo build
        run: |
          $env:PKG_CONFIG="$env:VCPKG_INSTALLATION_ROOT\installed\x64-windows\tools\pkgconf\pkgconf.exe"
          cargo build --workspace --features vendored

      - name: Cargo test
        run: |
          $env:PKG_CONFIG="$env:VCPKG_INSTALLATION_ROOT\installed\x64-windows\tools\pkgconf\pkgconf.exe"
          cargo test --workspace --features vendored
        env:
          RUST_BACKTRACE: 1

      - name: ctest tests
        run: |
          $env:PKG_CONFIG="$env:VCPKG_INSTALLATION_ROOT\installed\x64-windows\tools\pkgconf\pkgconf.exe"
          cargo run --manifest-path=systest/Cargo.toml --features bindgen

  windows-msys2-ci:
    name: windows-msys2
    runs-on: windows-latest

    defaults:
      run:
        shell: msys2 {0}

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install nightly toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            mingw-w64-x86_64-rust
            mingw-w64-x86_64-glib2
            mingw-w64-x86_64-cairo
            mingw-w64-x86_64-meson
            mingw-w64-x86_64-ninja
            mingw-w64-x86_64-python
            mingw-w64-x86_64-python-pip
            mingw-w64-x86_64-freetype
            mingw-w64-x86_64-fontconfig
            mingw-w64-x86_64-pkg-config

      - name: Cargo build
        run: cargo build --workspace --features vendored --features v4_4

      - name: Cargo test
        run: cargo test --workspace --features vendored --features v4_4
        env:
          RUST_BACKTRACE: 1

      - name: ctest tests
        run: >-
          cargo run
            --manifest-path=systest/Cargo.toml
            --features vendored
            --features v4_4

  build_result:
    name: homu build finished
    runs-on: ubuntu-latest
    needs:
      - "linux-ci-bindgen"
      - "linux-ci-shared"
      - "linux-ci-static"
      - "linux-ci-static-buildrs"
      - "mac-ci-shared"
      - "mac-ci-shared-bindgen-latest"
      - "windows-ci"
      - "windows-msys2-ci"

    steps:
      - name: Mark the job as successful
        run: exit 0
        if: success()
      - name: Mark the job as unsuccessful
        run: exit 1
        if: "!success()"
